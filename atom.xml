<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Victor Zhao's Blog]]></title>
  <link href="http://victorzhao1990.github.io/atom.xml" rel="self"/>
  <link href="http://victorzhao1990.github.io/"/>
  <updated>2015-03-10T13:24:11-04:00</updated>
  <id>http://victorzhao1990.github.io/</id>
  <author>
    <name><![CDATA[Victor Zhao]]></name>
    <email><![CDATA[xinyunzhao@msn.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Use Hortonworks Sandbox to Run a Mapreduce Program?]]></title>
    <link href="http://victorzhao1990.github.io/blog/2015/01/24/how-to-use-hortonworks-sandbox-to-run-a-mapreduce-program/"/>
    <updated>2015-01-24T20:00:09-05:00</updated>
    <id>http://victorzhao1990.github.io/blog/2015/01/24/how-to-use-hortonworks-sandbox-to-run-a-mapreduce-program</id>
    <content type="html"><![CDATA[<p>In this tutorial, I will let you to know how to use a virtual machine based hadoop environment to run the mapreduce program.</p>

<p>The VM image that we use is the HDP 2.2 Sandbox. The example is also posted on the apache hadoop offical website, which is a word count program. </p>

<p>First, let’s upload the input file to the file directory in the VM by using <code>scp</code> command.</p>

<pre><code># upload: local -&gt; remote 
scp local_file user@remote_host:remote_file
</code></pre>

<p><img src="http://victorzhao1990.github.io/images/2015-01-24-how-to-use-hortonworks-sandbox-to-run-a-mapreduce-program/DraggedImage.png" alt="" /></p>

<p>Now, we can check whether our input file has been uploaded into the sandbox, and put it into HDFS.
<img src="http://victorzhao1990.github.io/images/2015-01-24-how-to-use-hortonworks-sandbox-to-run-a-mapreduce-program/DraggedImage-1.png" alt="" />
Using the <code>hadoop fs -put</code> can easily put the input file into HDFS.
<img src="http://victorzhao1990.github.io/images/2015-01-24-how-to-use-hortonworks-sandbox-to-run-a-mapreduce-program/DraggedImage-2.png" alt="" />
Here, I also use <code>hadoop fs -ls</code> to check any specific HDFS directory. You may have already found that it quite similar to the Unix command <code>ls</code>. In fact, most of HDFS command map to the common Unix commands, so it may be familiar to the CLI users.</p>

<p>One more thing, if there is no such <code>/user/hadoop/hw3/input/</code> in HDFS, you may use <code>hadoop fs -mkdir</code> to create first.</p>

<p>Then, I will locate my mapreduce jar file and use <code>hadoop jar</code> command to execute the program.</p>

<pre><code>hadoop jar *YourJarFile* *DriverClassName* /your/input/file/location /your/output/file/location
</code></pre>

<p><img src="http://victorzhao1990.github.io/images/2015-01-24-how-to-use-hortonworks-sandbox-to-run-a-mapreduce-program/DraggedImage-3.png" alt="" /></p>

<p>When it finishes the job, you may check out the output within your HDFS by using <code>hadoop fs -cat</code>. The output file is named as  part-r-00000.
<img src="http://victorzhao1990.github.io/images/2015-01-24-how-to-use-hortonworks-sandbox-to-run-a-mapreduce-program/DraggedImage-4.png" alt="" /></p>

<p>Last but not the least, it is also possible to retrieve the output file from HDFS to local file system by using <code>hadoop fs -get</code>.
<img src="http://victorzhao1990.github.io/images/2015-01-24-how-to-use-hortonworks-sandbox-to-run-a-mapreduce-program/DraggedImage-5.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode Decode Ways]]></title>
    <link href="http://victorzhao1990.github.io/blog/2014/11/09/leetcode-decode-ways/"/>
    <updated>2014-11-09T15:07:53-05:00</updated>
    <id>http://victorzhao1990.github.io/blog/2014/11/09/leetcode-decode-ways</id>
    <content type="html"><![CDATA[<p>I encounter this problem in an interview with “F” company. Back then, I was not aware of anything that related to <strong>Dynamic Programming</strong>. After a long time of study this technique in Prof. Kingsford’s course, I am gradually becoming a master in it. Enjoy it!</p>

<p>http://www.ninechapter.com/solutions/decode-ways/</p>

<p>In this problem, the optimal structure can be defined that <em>num[i] is the number of different string representations for all the number before and with ith number included</em>. Therefore, we have <script type="math/tex">num[i] = \begin{cases}num[i] + num[i - 1] \\ \qquad \text{if number in postion[i - 1] match the letter in alphabet} \\ num[i] + num[i - 2] \\ \qquad \text{if number in postion[i - 2] and in postion[i - 1] form a letter, e.g. 26 means 'z'}\end{cases}</script>. Moreover, it also needs a base case to main the coherence of indices since we use one variable to trace both the num array and individual character in input number string. The base case is when i equals to 0, num[0] is 1.	 </p>

<pre><code>/**
*
*/
public class Solution {
	public int numDecodings(String s) {
    	if (s == null || s.length() == 0) {
        	return 0;
    	}
    	int[] num = new int[s.length() + 1];
    	num[0] = 1;
    	num[1] = s.charAt(0) != '0' ? 1 : 0;
    	for (int i = 2; i &lt;= s.length(); i++) {
        	if (s.charAt(i - 1) != '0') {
            	num[i] += num[i - 1];
        	}
        
        	int twoDigits = (s.charAt(i - 2) - '0') * 10 + (s.charAt(i - 1) - '0');
        	if ((twoDigits &lt;= 26) &amp;&amp; (twoDigits &gt;= 10)) {
            	num[i] += num[i - 2];
        	}
        	// Use to trace the current status
        	// System.out.println("Current letter is" + s.charAt(i - 1));
        	// System.out.println("num" + i + "=" + num[i]);
    	}
    	return num[s.length()];
	}
	// Test main method
	public static void main(String [] args) {
    	System.out.println((new Solution()).numDecodings(args[0]));
	}
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode Max Points on a Line]]></title>
    <link href="http://victorzhao1990.github.io/blog/2014/11/06/leetcode-max-points-on-a-line/"/>
    <updated>2014-11-06T11:21:41-05:00</updated>
    <id>http://victorzhao1990.github.io/blog/2014/11/06/leetcode-max-points-on-a-line</id>
    <content type="html"><![CDATA[<p>https://oj.leetcode.com/discuss/9929/a-java-solution-with-notes</p>

<pre><code>import java.util.HashMap;
import java.lang.Math;

// Definition for a point.
class Point {
	int x;
	int y;
	Point() { x = 0; y = 0; }
	Point(int a, int b) { x = a; y = b; }
}
/*  
* 
 	*  O(n^2) time.
 	*
 	*  A line is determined by two factors,say y=ax+b
 	*
 	*  If two points(x1,y1) (x2,y2) are on the same line(Of course).
 	*  Consider the gap between two points.
 	*  We have (y2-y1)=a(x2-x1),a=(y2-y1)/(x2-x1) a is a rational, b is canceled since b is a constant
 	*  If a third point (x3,y3) are on the same line. So we must have y3=ax3+b
 	*  Thus,(y3-y1)/(x3-x1)=(y2-y1)/(x2-x1)=a
 	*  Since a is a rational, there exists y0 and x0, y0/x0=(y3-y1)/(x3-x1)=(y2-y1)/(x2-x1)=a
 	*  So we can use y0&amp;x0 to track a line;
 	*/
public class Solution {
	// Point[] points;
	public int maxPoints(Point[] points) {
    	if (points == null) {
        	return 0;
    	}
    
    	// If there are only two points or less, just return the number of these points.
    	if (points.length &lt;= 2) {
        	return points.length;
    	}
    	// The value that is used to return for the final number of points
    	int result = 0;
    	// Store the number points in a variable
    	int n = points.length;
    	// Use a nested HashMap to store the information for x0, y0 and the number of points that reside on this line.
    	// The format is HashMap&lt;x0, HashMap&lt;y0, number&gt;&gt;
    	HashMap&lt;Integer, HashMap&lt;Integer, Integer&gt;&gt; map = new HashMap&lt;&gt;();
    	for (int i = 0; i &lt; n; i++) {
        	// If there are several points that have the same coordinates, use a counter called overlap to record it.
        	int overlap = 0;
        	// Since it use only one nested hashmap to store the information of the point starting from one specific i index pairing with 
        	// all other points starting from i + 1 to n, the map need to be refresh during the update of i. 
        	map.clear();
        	// Use variable max to record the maximum value in every iteration/lookup in the hashmap
        	int max = 0;
        	for (int j = i + 1; j &lt; n; j++) {
            	int x = points[i].x - points[j].x;
            	int y = points[i].y - points[j].y;
            	if ((x == 0) &amp;&amp; (y == 0)) {
               		overlap++;
                	continue;
            	}
            	// Use gcd to normalize the slope for each point
            	int gcd = generateGCD(x, y);
            	if (gcd != 0) {
                	x /= gcd;
                	y /= gcd;
            	}
            	// If map doesn't include one specific point, add it.
            	if (map.containsKey(x)) {
               		if (map.get(x).containsKey(y)) {
                    	map.get(x).put(y, map.get(x).get(y) + 1);
                	} else {
                   		map.get(x).put(y, 1);
                	}
            	} else {
                	HashMap&lt;Integer, Integer&gt; innerMap = new HashMap&lt;&gt;();
                	innerMap.put(y, 1);
                	map.put(x, innerMap);
            	}
            	max = Math.max(max, map.get(x).get(y));
        	}
        	// The number of overlap should be included.
        	result = Math.max(result, max + overlap + 1);
    	}
    	return result;
	}

	private int generateGCD(int a, int b) {
    	if (b == 0) {
        	return a;
    	} else {
        	return generateGCD(b, a % b);
    	}
	}
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go for Ten Interviews]]></title>
    <link href="http://victorzhao1990.github.io/blog/2014/10/02/go-for-ten-interviews/"/>
    <updated>2014-10-02T12:32:52-04:00</updated>
    <id>http://victorzhao1990.github.io/blog/2014/10/02/go-for-ten-interviews</id>
    <content type="html"><![CDATA[<p>Just have failed the first two. There are still eight left.</p>

<p>You are going to fail the first five, and nail the last five, which are FLAG and so on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finally, the Go-mode!]]></title>
    <link href="http://victorzhao1990.github.io/blog/2014/09/11/finally/"/>
    <updated>2014-09-11T12:17:41-04:00</updated>
    <id>http://victorzhao1990.github.io/blog/2014/09/11/finally</id>
    <content type="html"><![CDATA[<p>Efforts have been made.
<img src="http://victorzhao1990.github.io/images/go-mode.png" alt="Go-mode" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C U Tomorrow.]]></title>
    <link href="http://victorzhao1990.github.io/blog/2014/09/04/c-u-tomorrow/"/>
    <updated>2014-09-04T19:55:58-04:00</updated>
    <id>http://victorzhao1990.github.io/blog/2014/09/04/c-u-tomorrow</id>
    <content type="html"><![CDATA[<p>Never say no to the big thing that hasn’t come yet.</p>

<p><img src="http://victorzhao1990.github.io/images/boeing_logo-copy.gif" alt="Boeing Icon" /></p>
]]></content>
  </entry>
  
</feed>
